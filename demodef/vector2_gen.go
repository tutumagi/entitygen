// Code generated by generator, DO NOT EDIT.
package demodef

import (
	"encoding/json"
	attr "gitlab.gamesword.com/nut/entitygen/attr"
	bson "go.mongodb.org/mongo-driver/bson"
)

var Vector2Meta *attr.Meta

func init() {
	Vector2Meta = attr.NewMeta(func() interface{} {
		return EmptyVector2()
	})

	Vector2Meta.DefAttr("x", attr.Float32, attr.AfBase, true)
	Vector2Meta.DefAttr("y", attr.Float32, attr.AfBase, true)
}

type Vector2 attr.StrMap

func EmptyVector2() *Vector2 {
	return NewVector2(0, 0)
}
func NewVector2(x float32, y float32) *Vector2 {
	m := (*Vector2)(attr.NewStrMap(nil))
	m.SetX(x)
	m.SetY(y)
	m.ClearChangeKey()
	return m
}
func (a *Vector2) GetX() float32 {
	val := (*attr.StrMap)(a).Float32("x")
	return val
}
func (a *Vector2) SetX(x float32) {
	(*attr.StrMap)(a).Set("x", x)
}

func (a *Vector2) GetY() float32 {
	val := (*attr.StrMap)(a).Float32("y")
	return val
}
func (a *Vector2) SetY(y float32) {
	(*attr.StrMap)(a).Set("y", y)
}

func (a *Vector2) HasChange() bool {
	return (*attr.StrMap)(a).HasChange()
}
func (a *Vector2) ChangeKey() map[string]struct{} {
	return (*attr.StrMap)(a).ChangeKey()
}
func (a *Vector2) ClearChangeKey() {
	(*attr.StrMap)(a).ClearChangeKey()
}
func (a *Vector2) setParent(k string, parent attr.Field) {
	(*attr.StrMap)(a).SetParent(k, parent)
}
func (a *Vector2) ForEach(fn func(k string, v interface{}) bool) {
	(*attr.StrMap)(a).ForEach(fn)
}
func (a *Vector2) Equal(other *Vector2) bool {
	return (*attr.StrMap)(a).Equal((*attr.StrMap)(other))
}
func (a *Vector2) Undertype() interface{} {
	return (*attr.StrMap)(a)
}
func (a *Vector2) Data() map[string]interface{} {
	dd := map[string]interface{}{}
	a.ForEach(func(k string, v interface{}) bool {
		dd[k] = v
		return true
	})
	return dd
}
func (a *Vector2) MarshalJSON() ([]byte, error) {
	return json.Marshal((*attr.StrMap)(a).ToMap())
}
func (a *Vector2) UnmarshalJSON(b []byte) error {
	mm, err := Vector2Meta.UnmarshalJson(b)
	if err != nil {
		return err
	}
	(*attr.StrMap)(a).SetData(mm)
	(*attr.StrMap)(a).ForEach(func(k string, v interface{}) bool {
		if k != "id" && !Vector2Meta.GetDef(k).IsPrimary() {
			v.(IField).setParent(k, (*attr.StrMap)(a))
		}
		return true
	})
	return nil
}
func (a *Vector2) MarshalBSON() ([]byte, error) {
	return bson.Marshal((*attr.StrMap)(a).ToMap())
}
func (a *Vector2) UnmarshalBSON(b []byte) error {
	mm, err := Vector2Meta.UnmarshalBson(b)
	if err != nil {
		return err
	}
	(*attr.StrMap)(a).SetData(mm)
	(*attr.StrMap)(a).ForEach(func(k string, v interface{}) bool {
		if k != "id" && !Vector2Meta.GetDef(k).IsPrimary() {
			v.(IField).setParent(k, (*attr.StrMap)(a))
		}
		return true
	})
	return nil
}
