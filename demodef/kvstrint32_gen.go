// Code generated by generator, DO NOT EDIT.
package demodef

import (
	"encoding/json"
	attr "github.com/tutumagi/entitygen/attr"
	bson "go.mongodb.org/mongo-driver/bson"
)

type KVStrInt32 attr.StrMap

func EmptyKVStrInt32() *KVStrInt32 {
	return NewKVStrInt32(nil)
}
func NewKVStrInt32(data map[string]int32) *KVStrInt32 {
	var convertData map[string]interface{} = map[string]interface{}{}
	for k, v := range data {
		convertData[k] = v
	}
	return (*KVStrInt32)(attr.NewStrMap(convertData))
}
func CopyKVStrInt32(value *KVStrInt32) *KVStrInt32 {
	if value == nil {
		return nil
	}
	a := EmptyKVStrInt32()
	value.ForEach(func(k string, v int32) bool {
		a.Set(k, v)
		return true
	})
	return a
}
func (a *KVStrInt32) Set(k string, v int32) {
	(*attr.StrMap)(a).Set(k, v)
}
func (a *KVStrInt32) Get(k string) int32 {
	val := (*attr.StrMap)(a).Int32(k)
	return val
}
func (a *KVStrInt32) Delete(k string) bool {
	return (*attr.StrMap)(a).Delete(k)
}
func (a *KVStrInt32) Count() int {
	return (*attr.StrMap)(a).Len()
}
func (a *KVStrInt32) SetParent(k string, parent attr.Field) {
	(*attr.StrMap)(a).SetParent(k, parent)
}
func (a *KVStrInt32) ForEach(fn func(k string, v int32) bool) {
	(*attr.StrMap)(a).ForEach(func(k string, v interface{}) bool {
		return fn(k, v.(int32))
	})
}
func (a *KVStrInt32) Equal(other *KVStrInt32) bool {
	return (*attr.StrMap)(a).Equal((*attr.StrMap)(other))
}
func (a *KVStrInt32) Undertype() interface{} {
	return (*attr.StrMap)(a)
}
func (a *KVStrInt32) Has(k string) bool {
	return (*attr.StrMap)(a).Has(k)
}
func (a *KVStrInt32) Data() map[string]int32 {
	dd := map[string]int32{}
	a.ForEach(func(k string, v int32) bool {
		dd[k] = v
		return true
	})
	return dd
}
func (a *KVStrInt32) MarshalJSON() ([]byte, error) {
	return json.Marshal((*attr.StrMap)(a).ToMap())
}
func (a *KVStrInt32) UnmarshalJSON(b []byte) error {
	dd := map[string]int32{}
	err := json.Unmarshal(b, &dd)
	if err != nil {
		return err
	}
	convertData := map[string]interface{}{}
	for k, v := range dd {
		convertData[k] = v
	}
	(*attr.StrMap)(a).SetData(convertData)
	return nil
}
func (a *KVStrInt32) MarshalBSON() ([]byte, error) {
	return bson.Marshal((*attr.StrMap)(a).ToMap())
}
func (a *KVStrInt32) UnmarshalBSON(b []byte) error {
	dd := map[string]int32{}
	err := bson.Unmarshal(b, &dd)
	if err != nil {
		return err
	}
	convertData := map[string]interface{}{}
	for k, v := range dd {
		convertData[k] = v
	}
	(*attr.StrMap)(a).SetData(convertData)
	return nil
}
