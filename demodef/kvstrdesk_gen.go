// Code generated by generator, DO NOT EDIT.
package demodef

import (
	"encoding/json"
	attr "gitlab.gamesword.com/nut/entitygen/attr"
	bson "go.mongodb.org/mongo-driver/bson"
)

type KVStrDesk attr.StrMap

func EmptyKVStrDesk() *KVStrDesk {
	return NewKVStrDesk(nil)
}
func NewKVStrDesk(data map[string]*Desk) *KVStrDesk {
	var convertData map[string]interface{} = map[string]interface{}{}
	for k, v := range data {
		convertData[k] = v
	}
	return (*KVStrDesk)(attr.NewStrMap(convertData))
}
func (a *KVStrDesk) Set(k string, v *Desk) {
	v.SetParent(k, (*attr.StrMap)(a))
	(*attr.StrMap)(a).Set(k, v)
}
func (a *KVStrDesk) Get(k string) *Desk {
	val := (*attr.StrMap)(a).Value(k)
	if val == nil {
		return nil
	}
	return val.(*Desk)
}
func (a *KVStrDesk) Delete(k string) bool {
	return (*attr.StrMap)(a).Delete(k)
}
func (a *KVStrDesk) Count() int {
	return (*attr.StrMap)(a).Len()
}
func (a *KVStrDesk) SetParent(k string, parent attr.Field) {
	(*attr.StrMap)(a).SetParent(k, parent)
}
func (a *KVStrDesk) ForEach(fn func(k string, v *Desk) bool) {
	(*attr.StrMap)(a).ForEach(func(k string, v interface{}) bool {
		return fn(k, v.(*Desk))
	})
}
func (a *KVStrDesk) Equal(other *KVStrDesk) bool {
	return (*attr.StrMap)(a).Equal((*attr.StrMap)(other))
}
func (a *KVStrDesk) Undertype() interface{} {
	return (*attr.StrMap)(a)
}
func (a *KVStrDesk) Has(k string) bool {
	return (*attr.StrMap)(a).Has(k)
}
func (a *KVStrDesk) Data() map[string]*Desk {
	dd := map[string]*Desk{}
	a.ForEach(func(k string, v *Desk) bool {
		dd[k] = v
		return true
	})
	return dd
}
func (a *KVStrDesk) MarshalJSON() ([]byte, error) {
	return json.Marshal((*attr.StrMap)(a).ToMap())
}
func (a *KVStrDesk) UnmarshalJSON(b []byte) error {
	dd := map[string]*Desk{}
	err := json.Unmarshal(b, &dd)
	if err != nil {
		return err
	}
	convertData := map[string]interface{}{}
	for k, v := range dd {
		v.SetParent(k, (*attr.StrMap)(a))
		convertData[k] = v
	}
	(*attr.StrMap)(a).SetData(convertData)
	return nil
}
func (a *KVStrDesk) MarshalBSON() ([]byte, error) {
	return bson.Marshal((*attr.StrMap)(a).ToMap())
}
func (a *KVStrDesk) UnmarshalBSON(b []byte) error {
	dd := map[string]*Desk{}
	err := bson.Unmarshal(b, &dd)
	if err != nil {
		return err
	}
	convertData := map[string]interface{}{}
	for k, v := range dd {
		v.SetParent(k, (*attr.StrMap)(a))
		convertData[k] = v
	}
	(*attr.StrMap)(a).SetData(convertData)
	return nil
}
