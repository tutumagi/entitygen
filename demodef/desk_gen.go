// Code generated by generator, DO NOT EDIT.
package demodef

import (
	"encoding/json"
	attr "gitlab.gamesword.com/nut/entitygen/attr"
	bson "go.mongodb.org/mongo-driver/bson"
)

var DeskMeta *attr.Meta

func init() {
	DeskMeta = &attr.Meta{}

	DeskMeta.DefAttr("width", attr.Int32, attr.AfBase, true)
	DeskMeta.DefAttr("height", attr.Int32, attr.AfBase, true)
	DeskMeta.DefAttr("name", attr.String, attr.AfBase, true)
	DeskMeta.DefAttr("csvID", attr.Int32, attr.AfBase, true)
	DeskMeta.DefAttr("below", &Desk{}, attr.AfBase, true)
}

type Desk attr.StrMap

func EmptyDesk() *Desk {
	return NewDesk(0, 0, "", 0, nil)
}
func NewDesk(width int32, height int32, name string, csvID int32, below *Desk) *Desk {
	m := (*Desk)(attr.NewStrMap(nil))
	m.SetWidth(width)
	m.SetHeight(height)
	m.SetName(name)
	m.SetCsvID(csvID)
	m.SetBelow(below)
	m.ClearChangeKey()
	return m
}
func (a *Desk) GetWidth() int32 {
	val := (*attr.StrMap)(a).Int32("width")
	return val
}
func (a *Desk) SetWidth(width int32) {
	(*attr.StrMap)(a).Set("width", width)
}

func (a *Desk) GetHeight() int32 {
	val := (*attr.StrMap)(a).Int32("height")
	return val
}
func (a *Desk) SetHeight(height int32) {
	(*attr.StrMap)(a).Set("height", height)
}

func (a *Desk) GetName() string {
	val := (*attr.StrMap)(a).Str("name")
	return val
}
func (a *Desk) SetName(name string) {
	(*attr.StrMap)(a).Set("name", name)
}

func (a *Desk) GetCsvID() int32 {
	val := (*attr.StrMap)(a).Int32("csvID")
	return val
}
func (a *Desk) SetCsvID(csvID int32) {
	(*attr.StrMap)(a).Set("csvID", csvID)
}

func (a *Desk) GetBelow() *Desk {
	val := (*attr.StrMap)(a).Value("below")
	if val == nil {
		return nil
	}
	return val.(*Desk)
}
func (a *Desk) SetBelow(below *Desk) {
	below.setParent("below", (*attr.StrMap)(a))
	(*attr.StrMap)(a).Set("below", below)
}

func (a *Desk) HasChange() bool {
	return (*attr.StrMap)(a).HasChange()
}
func (a *Desk) ChangeKey() map[string]struct{} {
	return (*attr.StrMap)(a).ChangeKey()
}
func (a *Desk) ClearChangeKey() {
	(*attr.StrMap)(a).ClearChangeKey()
}
func (a *Desk) setParent(k string, parent attr.Field) {
	(*attr.StrMap)(a).SetParent(k, parent)
}
func (a *Desk) ForEach(fn func(k string, v interface{}) bool) {
	(*attr.StrMap)(a).ForEach(fn)
}
func (a *Desk) Equal(other *Desk) bool {
	return (*attr.StrMap)(a).Equal((*attr.StrMap)(other))
}
func (a *Desk) Undertype() interface{} {
	return (*attr.StrMap)(a)
}
func (a *Desk) Data() map[string]interface{} {
	dd := map[string]interface{}{}
	a.ForEach(func(k string, v interface{}) bool {
		dd[k] = v
		return true
	})
	return dd
}
func (a *Desk) MarshalJSON() ([]byte, error) {
	return json.Marshal((*attr.StrMap)(a).ToMap())
}
func (a *Desk) UnmarshalJSON(b []byte) error {
	mm, err := DeskMeta.UnmarshalJson(b)
	if err != nil {
		return err
	}
	(*attr.StrMap)(a).SetData(mm)
	(*attr.StrMap)(a).ForEach(func(k string, v interface{}) bool {
		if k != "id" && !DeskMeta.GetDef(k).IsPrimary() {
			v.(IField).setParent(k, (*attr.StrMap)(a))
		}
		return true
	})
	return nil
}
func (a *Desk) MarshalBSON() ([]byte, error) {
	return bson.Marshal((*attr.StrMap)(a).ToMap())
}
func (a *Desk) UnmarshalBSON(b []byte) error {
	mm, err := DeskMeta.UnmarshalBson(b)
	if err != nil {
		return err
	}
	(*attr.StrMap)(a).SetData(mm)
	(*attr.StrMap)(a).ForEach(func(k string, v interface{}) bool {
		if k != "id" && !DeskMeta.GetDef(k).IsPrimary() {
			v.(IField).setParent(k, (*attr.StrMap)(a))
		}
		return true
	})
	return nil
}
