// Code generated by generator, DO NOT EDIT.
package demodef

import (
	"encoding/json"
	"fmt"
	attr "gitlab.gamesword.com/nut/entitygen/attr"
	bson "go.mongodb.org/mongo-driver/bson"
)

type DeskSlice attr.Slice

func EmptyDeskSlice() *DeskSlice {
	return NewDeskSlice(nil)
}
func NewDeskSlice(items []*Desk) *DeskSlice {
	var convertData []interface{} = []interface{}{}
	for _, v := range items {
		convertData = append(convertData, v)
	}
	return (*DeskSlice)(attr.NewSlice(convertData))
}
func (a *DeskSlice) Set(idx int, item *Desk) {
	item.SetParent(fmt.Sprintf("ik%d", idx), (*attr.Slice)(a))
	(*attr.Slice)(a).Set(idx, item)
}
func (a *DeskSlice) Add(item *Desk) {
	idx := a.Count()
	item.SetParent(fmt.Sprintf("ik%d", idx), (*attr.Slice)(a))
	(*attr.Slice)(a).Add(item)
}
func (a *DeskSlice) At(idx int) *Desk {
	val := (*attr.Slice)(a).Value(idx)
	if val == nil {
		return nil
	}
	return val.(*Desk)
}
func (a *DeskSlice) DelAt(idx int) bool {
	return (*attr.Slice)(a).DeleteAt(idx)
}
func (a *DeskSlice) Count() int {
	return (*attr.Slice)(a).Len()
}
func (a *DeskSlice) SetParent(k string, parent attr.Field) {
	(*attr.Slice)(a).SetParent(k, parent)
}
func (a *DeskSlice) ForEach(fn func(k int, v *Desk) bool) {
	(*attr.Slice)(a).ForEach(func(k int, v interface{}) bool {
		return fn(k, v.(*Desk))
	})
}
func (a *DeskSlice) Equal(other *DeskSlice) bool {
	return (*attr.Slice)(a).Equal((*attr.Slice)(other))
}
func (a *DeskSlice) Undertype() interface{} {
	return (*attr.Slice)(a)
}
func (a *DeskSlice) Data() []*Desk {
	dd := []*Desk{}
	a.ForEach(func(idx int, v *Desk) bool {
		dd = append(dd, v)
		return true
	})
	return dd
}
func (a *DeskSlice) MarshalJSON() ([]byte, error) {
	return json.Marshal(map[string][]*Desk{
		"d": a.Data(),
	})
}
func (a *DeskSlice) UnmarshalJSON(b []byte) error {
	dd := map[string][]*Desk{}
	err := json.Unmarshal(b, &dd)
	if err != nil {
		return err
	}
	convertData := []interface{}{}
	for k, v := range dd["d"] {
		v.SetParent(fmt.Sprintf("ik%d", k), (*attr.Slice)(a))
		convertData = append(convertData, v)
	}
	(*attr.Slice)(a).SetData(convertData)
	return nil
}
func (a *DeskSlice) MarshalBSON() ([]byte, error) {
	return bson.Marshal(map[string][]*Desk{
		"d": a.Data(),
	})
}
func (a *DeskSlice) UnmarshalBSON(b []byte) error {
	dd := map[string][]*Desk{}
	err := bson.Unmarshal(b, &dd)
	if err != nil {
		return err
	}
	convertData := []interface{}{}
	for k, v := range dd["d"] {
		v.SetParent(fmt.Sprintf("ik%d", k), (*attr.Slice)(a))
		convertData = append(convertData, v)
	}
	(*attr.Slice)(a).SetData(convertData)
	return nil
}
