// Code generated by generator, DO NOT EDIT.
package demodef

import (
	"encoding/json"
	"fmt"
	attr "gitlab.gamesword.com/nut/entitygen/attr"
	bson "go.mongodb.org/mongo-driver/bson"
)

type KVInt32Desk attr.Int32Map

func EmptyKVInt32Desk() *KVInt32Desk {
	return NewKVInt32Desk(nil)
}
func NewKVInt32Desk(data map[int32]*Desk) *KVInt32Desk {
	var convertData map[int32]interface{} = map[int32]interface{}{}
	for k, v := range data {
		convertData[k] = v
	}
	return (*KVInt32Desk)(attr.NewInt32Map(convertData))
}
func CopyKVInt32Desk(value *KVInt32Desk) *KVInt32Desk {
	if value == nil {
		return nil
	}
	a := EmptyKVInt32Desk()
	value.ForEach(func(k int32, v *Desk) bool {
		a.Set(k, CopyDesk(v))
		return true
	})
	return a
}
func (a *KVInt32Desk) Set(k int32, v *Desk) {
	v.SetParent(fmt.Sprintf("mk%d", k), (*attr.Int32Map)(a))
	(*attr.Int32Map)(a).Set(k, v)
}
func (a *KVInt32Desk) Get(k int32) *Desk {
	val := (*attr.Int32Map)(a).Value(k)
	if val == nil {
		return nil
	}
	return val.(*Desk)
}
func (a *KVInt32Desk) Delete(k int32) bool {
	return (*attr.Int32Map)(a).Delete(k)
}
func (a *KVInt32Desk) Count() int {
	return (*attr.Int32Map)(a).Len()
}
func (a *KVInt32Desk) SetParent(k string, parent attr.Field) {
	(*attr.Int32Map)(a).SetParent(k, parent)
}
func (a *KVInt32Desk) ForEach(fn func(k int32, v *Desk) bool) {
	(*attr.Int32Map)(a).ForEach(func(k int32, v interface{}) bool {
		return fn(k, v.(*Desk))
	})
}
func (a *KVInt32Desk) Equal(other *KVInt32Desk) bool {
	return (*attr.Int32Map)(a).Equal((*attr.Int32Map)(other))
}
func (a *KVInt32Desk) Undertype() interface{} {
	return (*attr.Int32Map)(a)
}
func (a *KVInt32Desk) Has(k int32) bool {
	return (*attr.Int32Map)(a).Has(k)
}
func (a *KVInt32Desk) Data() map[int32]*Desk {
	dd := map[int32]*Desk{}
	a.ForEach(func(k int32, v *Desk) bool {
		dd[k] = v
		return true
	})
	return dd
}
func (a *KVInt32Desk) MarshalJSON() ([]byte, error) {
	return json.Marshal((*attr.Int32Map)(a).ToMap())
}
func (a *KVInt32Desk) UnmarshalJSON(b []byte) error {
	dd := map[int32]*Desk{}
	err := json.Unmarshal(b, &dd)
	if err != nil {
		return err
	}
	convertData := map[int32]interface{}{}
	for k, v := range dd {
		v.SetParent(fmt.Sprintf("mk%d", k), (*attr.Int32Map)(a))
		convertData[k] = v
	}
	(*attr.Int32Map)(a).SetData(convertData)
	return nil
}
func (a *KVInt32Desk) MarshalBSON() ([]byte, error) {
	return bson.Marshal((*attr.Int32Map)(a).ToMap())
}
func (a *KVInt32Desk) UnmarshalBSON(b []byte) error {
	dd := map[int32]*Desk{}
	err := bson.Unmarshal(b, &dd)
	if err != nil {
		return err
	}
	convertData := map[int32]interface{}{}
	for k, v := range dd {
		v.SetParent(fmt.Sprintf("mk%d", k), (*attr.Int32Map)(a))
		convertData[k] = v
	}
	(*attr.Int32Map)(a).SetData(convertData)
	return nil
}
