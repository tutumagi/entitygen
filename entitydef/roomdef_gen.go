// Code generated by generator, DO NOT EDIT.
package entitydef

import (
	"encoding/json"
	attr "gitlab.gamesword.com/nut/entitygen/attr"
	bson "go.mongodb.org/mongo-driver/bson"
)

var roomdefMeta *attr.Meta

func init() {
	roomdefMeta = &attr.Meta{}

	roomdefMeta.DefAttr("csvPos", attr.Int32, attr.AfOtherClients, true)
	roomdefMeta.DefAttr("buildID", attr.String, attr.AfOtherClients, true)
	roomdefMeta.DefAttr("extends", &KVInt32Int32{}, attr.AfOtherClients, true)
	roomdefMeta.DefAttr("extends1", &KVInt32Str{}, attr.AfOtherClients, true)
	roomdefMeta.DefAttr("extends2", &KVStrInt32{}, attr.AfOtherClients, true)
	roomdefMeta.DefAttr("extends3", &KVStrStr{}, attr.AfOtherClients, true)
	roomdefMeta.DefAttr("desk111", &Desk{}, attr.AfOtherClients, true)
	roomdefMeta.DefAttr("desks222", &KVInt32Desk{}, attr.AfOtherClients, true)
	roomdefMeta.DefAttr("desks333", &KVStrDesk{}, attr.AfOtherClients, true)
	roomdefMeta.DefAttr("desksArr", &DeskSlice{}, attr.AfOtherClients, true)
	roomdefMeta.DefAttr("int8ss", &Int8Slice{}, attr.AfOtherClients, true)
	roomdefMeta.DefAttr("vec3", &Vector3{}, attr.AfOtherClients, true)
	roomdefMeta.DefAttr("rot", &Vector3{}, attr.AfOtherClients, true)
}

type RoomDef attr.StrMap

func EmptyRoomDef() *RoomDef {
	return NewRoomDef(0, "", nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil)
}
func NewRoomDef(csvPos int32, buildID string, extends *KVInt32Int32, extends1 *KVInt32Str, extends2 *KVStrInt32, extends3 *KVStrStr, desk111 *Desk, desks222 *KVInt32Desk, desks333 *KVStrDesk, desksArr *DeskSlice, int8ss *Int8Slice, vec3 *Vector3, rot *Vector3) *RoomDef {
	m := (*RoomDef)(attr.NewStrMap(nil))
	m.SetCsvPos(csvPos)
	m.SetBuildID(buildID)
	m.SetExtends(extends)
	m.SetExtends1(extends1)
	m.SetExtends2(extends2)
	m.SetExtends3(extends3)
	m.SetDesk111(desk111)
	m.SetDesks222(desks222)
	m.SetDesks333(desks333)
	m.SetDesksArr(desksArr)
	m.SetInt8ss(int8ss)
	m.SetVec3(vec3)
	m.SetRot(rot)
	m.ClearChangeKey()
	return m
}
func (a *RoomDef) GetCsvPos() int32 {
	val := (*attr.StrMap)(a).Int32("csvPos")
	return val
}
func (a *RoomDef) SetCsvPos(csvPos int32) {
	(*attr.StrMap)(a).Set("csvPos", csvPos)
}

func (a *RoomDef) GetBuildID() string {
	val := (*attr.StrMap)(a).Str("buildID")
	return val
}
func (a *RoomDef) SetBuildID(buildID string) {
	(*attr.StrMap)(a).Set("buildID", buildID)
}

func (a *RoomDef) GetExtends() *KVInt32Int32 {
	val := (*attr.StrMap)(a).Value("extends")
	if val == nil {
		return nil
	}
	return val.(*KVInt32Int32)
}
func (a *RoomDef) SetExtends(extends *KVInt32Int32) {
	extends.setParent("extends", (*attr.StrMap)(a))
	(*attr.StrMap)(a).Set("extends", extends)
}

func (a *RoomDef) GetExtends1() *KVInt32Str {
	val := (*attr.StrMap)(a).Value("extends1")
	if val == nil {
		return nil
	}
	return val.(*KVInt32Str)
}
func (a *RoomDef) SetExtends1(extends1 *KVInt32Str) {
	extends1.setParent("extends1", (*attr.StrMap)(a))
	(*attr.StrMap)(a).Set("extends1", extends1)
}

func (a *RoomDef) GetExtends2() *KVStrInt32 {
	val := (*attr.StrMap)(a).Value("extends2")
	if val == nil {
		return nil
	}
	return val.(*KVStrInt32)
}
func (a *RoomDef) SetExtends2(extends2 *KVStrInt32) {
	extends2.setParent("extends2", (*attr.StrMap)(a))
	(*attr.StrMap)(a).Set("extends2", extends2)
}

func (a *RoomDef) GetExtends3() *KVStrStr {
	val := (*attr.StrMap)(a).Value("extends3")
	if val == nil {
		return nil
	}
	return val.(*KVStrStr)
}
func (a *RoomDef) SetExtends3(extends3 *KVStrStr) {
	extends3.setParent("extends3", (*attr.StrMap)(a))
	(*attr.StrMap)(a).Set("extends3", extends3)
}

func (a *RoomDef) GetDesk111() *Desk {
	val := (*attr.StrMap)(a).Value("desk111")
	if val == nil {
		return nil
	}
	return val.(*Desk)
}
func (a *RoomDef) SetDesk111(desk111 *Desk) {
	desk111.setParent("desk111", (*attr.StrMap)(a))
	(*attr.StrMap)(a).Set("desk111", desk111)
}

func (a *RoomDef) GetDesks222() *KVInt32Desk {
	val := (*attr.StrMap)(a).Value("desks222")
	if val == nil {
		return nil
	}
	return val.(*KVInt32Desk)
}
func (a *RoomDef) SetDesks222(desks222 *KVInt32Desk) {
	desks222.setParent("desks222", (*attr.StrMap)(a))
	(*attr.StrMap)(a).Set("desks222", desks222)
}

func (a *RoomDef) GetDesks333() *KVStrDesk {
	val := (*attr.StrMap)(a).Value("desks333")
	if val == nil {
		return nil
	}
	return val.(*KVStrDesk)
}
func (a *RoomDef) SetDesks333(desks333 *KVStrDesk) {
	desks333.setParent("desks333", (*attr.StrMap)(a))
	(*attr.StrMap)(a).Set("desks333", desks333)
}

func (a *RoomDef) GetDesksArr() *DeskSlice {
	val := (*attr.StrMap)(a).Value("desksArr")
	if val == nil {
		return nil
	}
	return val.(*DeskSlice)
}
func (a *RoomDef) SetDesksArr(desksArr *DeskSlice) {
	desksArr.setParent("desksArr", (*attr.StrMap)(a))
	(*attr.StrMap)(a).Set("desksArr", desksArr)
}

func (a *RoomDef) GetInt8ss() *Int8Slice {
	val := (*attr.StrMap)(a).Value("int8ss")
	if val == nil {
		return nil
	}
	return val.(*Int8Slice)
}
func (a *RoomDef) SetInt8ss(int8ss *Int8Slice) {
	int8ss.setParent("int8ss", (*attr.StrMap)(a))
	(*attr.StrMap)(a).Set("int8ss", int8ss)
}

func (a *RoomDef) GetVec3() *Vector3 {
	val := (*attr.StrMap)(a).Value("vec3")
	if val == nil {
		return nil
	}
	return val.(*Vector3)
}
func (a *RoomDef) SetVec3(vec3 *Vector3) {
	vec3.setParent("vec3", (*attr.StrMap)(a))
	(*attr.StrMap)(a).Set("vec3", vec3)
}

func (a *RoomDef) GetRot() *Vector3 {
	val := (*attr.StrMap)(a).Value("rot")
	if val == nil {
		return nil
	}
	return val.(*Vector3)
}
func (a *RoomDef) SetRot(rot *Vector3) {
	rot.setParent("rot", (*attr.StrMap)(a))
	(*attr.StrMap)(a).Set("rot", rot)
}

func (a *RoomDef) HasChange() bool {
	return (*attr.StrMap)(a).HasChange()
}
func (a *RoomDef) ChangeKey() map[string]struct{} {
	return (*attr.StrMap)(a).ChangeKey()
}
func (a *RoomDef) ClearChangeKey() {
	(*attr.StrMap)(a).ClearChangeKey()
}
func (a *RoomDef) setParent(k string, parent attr.Field) {
	(*attr.StrMap)(a).SetParent(k, parent)
}
func (a *RoomDef) ForEach(fn func(k string, v interface{}) bool) {
	(*attr.StrMap)(a).ForEach(fn)
}
func (a *RoomDef) Equal(other *RoomDef) bool {
	return (*attr.StrMap)(a).Equal((*attr.StrMap)(other))
}
func (a *RoomDef) Undertype() interface{} {
	return (*attr.StrMap)(a)
}
func (a *RoomDef) data() map[string]interface{} {
	dd := map[string]interface{}{}
	a.ForEach(func(k string, v interface{}) bool {
		dd[k] = v
		return true
	})
	return dd
}
func (a *RoomDef) MarshalJSON() ([]byte, error) {
	return json.Marshal((*attr.StrMap)(a).ToMap())
}
func (a *RoomDef) UnmarshalJSON(b []byte) error {
	mm, err := roomdefMeta.UnmarshalJson(b)
	if err != nil {
		return err
	}
	(*attr.StrMap)(a).SetData(mm)
	(*attr.StrMap)(a).ForEach(func(k string, v interface{}) bool {
		if k != "id" && !roomdefMeta.GetDef(k).IsPrimary() {
			v.(IField).setParent(k, (*attr.StrMap)(a))
		}
		return true
	})
	return nil
}
func (a *RoomDef) MarshalBSON() ([]byte, error) {
	return bson.Marshal((*attr.StrMap)(a).ToMap())
}
func (a *RoomDef) UnmarshalBSON(b []byte) error {
	mm, err := roomdefMeta.UnmarshalBson(b)
	if err != nil {
		return err
	}
	(*attr.StrMap)(a).SetData(mm)
	(*attr.StrMap)(a).ForEach(func(k string, v interface{}) bool {
		if k != "id" && !roomdefMeta.GetDef(k).IsPrimary() {
			v.(IField).setParent(k, (*attr.StrMap)(a))
		}
		return true
	})
	return nil
}
